#!/bin/bash

#--------------------------------------------------------------------------
#
#                                ▞▀▖      
#                                 ▗▘▚▗▘▀▜▘
#                                ▗▘ ▗▚ ▗▘ 
#                                ▀▀▘▘ ▘▀▀▘
#
# Description:
#    (Re)compresses everything to .xz or .tar.xz.
#
#-------------------------------------------------------------------------
#
# Found this useful? Appalling? Appealing? Please let me know.
# The Unabashed welcomes your impressions. 
#
# You will find the
#   unabashed
# at the location opposite to
#   moc • thgimliam
#
#-------------------------------------------------------------------------
#
# License:
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
#--------------------------------------------------------------------------

# Program name from its filename
prog=${0##*/}


# Some colors
LIGHTRED='\e[1;31m'
LIGHTPURPLE='\e[1;35m'
YELLOW='\e[1;33m'
NC='\e[0m'  

# Calling for help is the same as calling without arguments.
case $1 in --help|-[h?])  $0; exit 1  ;; esac

# Usage if argument isn't given
[[ $# -eq 0 ]] && {
    clear
    echo -e "
${LIGHTRED}Description:${NC}
    Converts all (well, a lot of) archive types into xz or tar.xz files.
    Why do that? Because .xz compresses fairly better than .zip or .gz. I've seen a file.tar.gz 
    shrink from 32Mb to 8Mb when converted to .tar.xz — and that is because of the smart 
    way xz handles compressing when many of the files to be compressed are similar in contents.  
    For more, check:
    ${LIGHTPURPLE}https://en.wikipedia.org/wiki/Xz${NC}  and  ${LIGHTPURPLE}http://tukaani.org/xz/${NC}

    Below: supported extensions to convert. Other files will be xz'd. Dirs will be tar.xz'd.
    ${YELLOW}.7z .ar .bz2 .cb7 .cbr .cbt .cbz .gz .jar .lz .lzma .lzo .rar .tar .tar.bz2 
    ${YELLOW}.tar.7z .tar.gz .tar.lz .tar.lzma .tar.lzo .tbz .tbz2 .tgz .tlz .tzo .Z .zip 
    ${YELLOW}.xz${LIGHTPURPLE}* ${YELLOW}.tar.xz${LIGHTPURPLE}* ${YELLOW}.txz${LIGHTPURPLE}*${NC}   (${LIGHTPURPLE}*${NC} yep, we recompress them, to ensure maximum compression)

${LIGHTRED}Usage and examples:${NC}
    ${YELLOW}$prog [-n] <files>${NC}
    ${YELLOW}$prog f1.jar f2.zip f3.tgz${NC}  # Converts those three, and backs up originals at ./OldArchives
    ${YELLOW}$prog -n *.tar.gz${NC}           # Converts all .tar.gz and deletes the originals.

${LIGHTRED}Dependencies:${NC}
    Must have installed {unrar-free, lzip, lzop, p7zip-full, gzip, bzip2} 
    if you want to extract, respectively: {.rar, .lzip, .lzop, .lzma, .7z, .gz, .bz2}
    ${YELLOW}sudo apt-get install xz-utils unrar-free lzip lzop p7zip-full gzip bzip2${NC}

${LIGHTRED}Limitations (not-exhaustive):${NC}
    - Recognizes filetype by extension, not by ${YELLOW}/usr/share/file/magic${NC}
    - Does not handle password protection.
    - Limit cases not thoroughly tested. (Filenames with crazy characters, nested archives etc.)
    - Conversion of filenames with spaces not thoroughly tested; be cautious. 
      I recommend ${YELLOW}detoxing${NC} those files. (${YELLOW}sudo apt-get install detox${NC})

${LIGHTRED}Final notes:${NC}
    1) To extract a .xz, run: ${YELLOW}xz -d MYFILE.xz${NC}.   To extract a .tar.xz, run: ${YELLOW}tar xvJf MYFILE.tar.xz${NC}
    2) Note that unrar-free fails often. If you have only a few .rar, I'd suggest extracting them
       by hand with Peazip, and then recompressing the files normally to .tar.xz.
    3) USE IT AT YOUR OWN RISK. I wrote this carefully — but I suggest you back up your input files 
       before using ${YELLOW}$prog${NC}, as I may have overlooked something critical. 
       Don't blame me if you run ${YELLOW}$prog${NC} and your archive gets warped or your cat microwaved.
       But tell me about it, or fix it, so we can avoid other people's cat from being microwaved.
     " | more
     exit 1
}

 # TODO: more error handling (e.g.: if mktemp or achive extraction fails)
 
 # TODO: add other formats not yet covered

 # TODO:  frill: add  a flag  option to  a  pv pipe  to show  progress bar  when
 # compressing stuff. I would need to use shopt to handle flags in this case.


#----------------------------------------------------------------------------
# Check for missing commands

needed_commands="sed xz tar"  

missing_counter=0
for needed_command in $needed_commands; do
    if ! hash "$needed_command" >/dev/null 2>&1; then
        printf "Command not found in PATH: %s\n" "$needed_command" >&2
        : $((missing_counter++))
    fi
done

if [[ $missing_counter -eq 1 ]]; then
    printf "At least %d command is missing, install it\n" "$missing_counter" >&2
    exit 1
elif [[ $missing_counter -gt 1 ]]; then
    printf "At least %d commands are missing, install them\n" "$missing_counter" >&2
    exit 2
fi
#----------------------------------------------------------------------------

mydir="$PWD"
oldarchivesdir="$mydir/OldArchives"

# Environment flag: defaults xz compression to maximum
export XZ_OPT=${XZ_OPT:-"-9"}

# Initialize variable defining if original file was .xz, .tar.xz or .txz
originalWasXZ=0  # defaults to not

# Create flag to indicate whether or not to back up originals. Default is yes.
case $1 in
    -n|--no-backup)
        backup=0
        shift
    ;;
    *)
        backup=1
    ;;
esac

find_extension ()
# Gets the full extension of the file.
# Well, for our scope, it means it includes the .tar as part of the extension
# in a  file.tar.gz  case (extension = tar.gz, not only gz).
# Deals well with the  file.with.dots.tar.bz2  scenario...
# Maybe TODO: if file has no extension, execute `file` and grep from there. 
#    (For that, create a separate program to add extension based on `file` results)
{
    input=$1
    ext1=$(basename "$input" | sed 's/.*\.//')
    [[ "$ext1" = "$input" ]] && ext1=""
    rest=$(echo "$input" | sed 's|\.[^.]*$||')
    [[ "$(echo "$rest" | sed 's/.*\(....\)$/\1/')" = ".tar" ]] && ext2="tar."
    echo "${ext2}${ext1}"
}

# Process each argument
for argument in "$@"; do
    canonical=$(readlink --canonicalize "${argument}")
    extension=$(find_extension "$canonical")
    basename=$(basename "$canonical" | sed "s/\.${extension}$//")
    pathbasename=$(echo "$canonical" | sed "s/\.${extension}$//")  # full path; important if symlink

    # Removed the message. Unnecessary. Silence is golden: 
    # echo -e ${YELLOW}"\n== Converting ${basename}.${extension} to xz format... ==\n"${NC}
 
    # Is it a directory? tar.xz it. The original directory will be kept.
    if   [[ -d "$canonical" ]]; then
        (cd "$canonical" && tar --create --atime-preserve * | xz - > "$canonical.tar.xz")

    # Oh, it's a file then? Very well.
    elif [[ -f "$canonical" ]]; then
        case "$canonical" in
            # Multiple-file extraction; must use $mytempdir
            *.zip | *.jar | *.7z | *.rar | *.ar | *.cbz | *.cb7 | *.cbr)
                mytempdir=$(mktemp --tmpdir=$"$TMPDIR" ${PROG}.XXXXXXXXXX)
                cd "$mytempdir"
                case "$canonical" in
                    *.zip | *.jar | *.cbz)   unzip -q -d .  "$canonical"    ;;
                    *.7z  | *.cb7)           7z -o. x       "$canonical"    ;;
                    *.rar | *.cbr)           unrar x        "$canonical"    ;;
                    *.ar)                    ar x           "$canonical"    ;;
                    *)                       echo "Can't happen..."         ;;
                esac
                tar --create --atime-preserve . | xz - > "${pathbasename}.tar.xz"
                # IF not error in any of the pipes of previous command AND backup flag is off
                # THEN delete original file.
                [[ $(echo ${PIPESTATUS[@]}) =~ 0 ]] && [[ $backup = 0 ]] && rm --force "$canonical" 
                [[ $backup = 1 ]] && mkdir -p "$oldarchivesdir" && mv "$canonical" "${oldarchivesdir}/"

                rm --recursive --force $mytempdir
                cd "$mydir"
            ;;


            # Single-file extraction (we won't "untar")
            *.tar.* | *.tgz | *.tbz | *.tbz2 | *.tzo | *.tlz | *.txz)
                case "$canonical" in
                    *.tar.gz | *.tgz | *.tar.Z)       gunzip -c "$canonical" | xz - > "${pathbasename}.tar.xz" ;;
                    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) bunzip2 -c "$canonical" | xz - > "${pathbasename}.tar.xz" ;;
                    *.tar.lzma)                       unlzma -c "$canonical" | xz - > "${pathbasename}.tar.xz" ;;
                    *.tar.lzo | .tzo)      lzop --decompress -c "$canonical" | xz - > "${pathbasename}.tar.xz" ;;
                    *.tar.lz |.tlz) lzip --keep --decompress -c "$canonical" | xz - > "${pathbasename}.tar.xz" ;;
                    *.tar.xz |*.txz)                   xz -d -c "$canonical" | xz - > "${pathbasename}.tx" && 
                        mv "${pathbasename}.tx" "${pathbasename}.tar.xz" && 
                        originalWasXZ=1 ;;
                esac
                [[ $(echo ${PIPESTATUS[@]}) =~ 0 ]] && [[ $backup = 0 ]] && rm --force "$canonical" 
                [[ $originalWasXZ = 1 ]] || {
                    [[ $backup = 1 ]] && 
                    mkdir -p "$oldarchivesdir" && 
                    mv "$canonical" "${oldarchivesdir}/"
                }
            ;;

            *.gz | *.Z | *.bz | *.bz2 | *.lzma | *.lzo | *.lz | *.xz)
                case "$canonical" in
                    *.gz | *.Z)              gunzip -c "$canonical" | xz - > "${pathbasename}.xz" ;;
                    *.bz | *.bz2)           bunzip2 -c "$canonical" | xz - > "${pathbasename}.xz" ;;
                    *.lzma)                  unlzma -c "$canonical" | xz - > "${pathbasename}.xz" ;;
                    *.lzo)        lzop --decompress -c "$canonical" | xz - > "${pathbasename}.xz" ;;
                    *.lz)  lzip --keep --decompress -c "$canonical" | xz - > "${pathbasename}.xz" ;;
                    *.xz)                     xz -d -c "$canonical" | xz - > "${pathbasename}.x"  &&
                        mv "${pathbasename}.x" "${pathbasename}.xz" && 
                        originalWasXZ=1 ;;
                esac
                [[ $(echo ${PIPESTATUS[@]}) =~ 0 ]] && [[ $backup = 0 ]] && rm --force "$canonical" 
                [[ $originalWasXZ = 1 ]] || {
                    [[ $backup = 1 ]] && 
                    mkdir -p "$oldarchivesdir" && 
                    mv "$canonical" "${oldarchivesdir}/"
                }
            ;;

            # All else, including *.tar, *.cbt and non-archives, etc: just xz them individually
            # No backup is made here, even without adding the -n flag.
            *)                                   xz "$canonical" ;;
        esac
    else
        echo >&2 "'$1' does not exist"
        exit 1
    fi
done

#------------------ END of PROGRAM ------------------#

